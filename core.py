import requests
import db_users
from telebot import types
from datetime import datetime, timedelta

now = datetime.now()
thirty_days = timedelta(30)
end = now + thirty_days #—Å–µ–≥–æ–¥–Ω—è –ø–ª—é—Å 30 –¥–Ω–µ–π

# –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ api
departments_url = 'https://chudodoctor.infoclinica.ru/specialists/departments'
doctors_url = 'https://chudodoctor.infoclinica.ru/specialists/doctors?departments='
intervals_url = f'https://chudodoctor.infoclinica.ru/api/reservation/intervals?st={now.strftime("%Y%m%d")}&en={end.strftime("%Y%m%d")}&dcode='
# intervals_url = f'https://chudodoctor.infoclinica.ru/api/reservation/schedule?st={now.strftime("%Y%m%d")}&en={end.strftime("%Y%m%d")}&doctor='

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
contacts_info = '''109544, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –®–∫–æ–ª—å–Ω–∞—è, –¥. 49
    –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    –ü–Ω-–ü—Ç: 7:30 ‚Äî 21:00
    –°–±: 8:00 ‚Äî 21:00
    –í—Å: 8:30 ‚Äî 20:00'''

# isRunning = 0
# shedule_bot_msg_1 = shedule_bot_msg_2 = 0

# –∑–∞–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
button = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
btn_back = types.KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")
button.add(btn_back)

# –∑–∞–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
main_btns = types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = types.KeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")
button2 = types.KeyboardButton("üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")
button3 = types.KeyboardButton("‚ùó –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
main_btns.add(button1, button2)
main_btns.row(button3)

# –ö–û–ù–°–¢–ê–ù–¢–´ –°–û–°–¢–û–Ø–ù–ò–ô
S_START = '–°—Ç–∞—Ä—Ç'
S_CHOOSE_DIR = '–°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π'
S_CHOOSE_DOCTOR = '–í—ã–±–æ—Ä –≤—Ä–∞—á–∞'
S_CHOOSE_DATE = '–í—ã–±–æ—Ä –¥–∞—Ç—ã'
S_CHOOSE_TIME = '–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏'
S_RECORD_DONE = '–ö–æ–Ω–µ—Ü –∑–∞–ø–∏—Å–∏'

def create_menu(mass, width=2, back=True):
    """
    This function allows to creat menu of buttons.
    mass - the list of string
    back - back button, if true, add a button back. Default back=True
    """
    markup = types.ReplyKeyboardMarkup(row_width=width, resize_keyboard=True)

    if len(mass) == 1:
        markup.row(mass[0])
    else:
        while len(mass) > 0:
            try:
                cut = mass[:2]
                markup.row(cut[0], cut[1])
                del mass[:2]
                
                if len(mass) == 1:
                    markup.row(mass[0])
                    break
            except:
                print('WTF')
    

    if back == True:
        markup.row('‚¨Ö –ù–∞–∑–∞–¥')
    
    return markup

def get_data_from_api(url, id):
    data = requests.get(url + str(id)).json()
    if (data["success"] == True):
        return data["data"]
    else:
        return "Api Error!"

def get_available_date(data, choosenDate=False):
    """Get the date or time from json"""
    key_intervals = []
    for intervals in data:
        for workdates in intervals["workdates"]:
            for date in workdates:
                time_interval = workdates[date][0]["intervals"]
                for time in time_interval:
                    if time['isFree'] == True:
                        if choosenDate != False: # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞, –∑–Ω–∞—á–∏—Ç –∏—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
                            if (choosenDate.replace('.','') == date):
                                key_intervals.append(time['time'])
                        else:
                            date = date[:4] + '.' + date[4:6] + '.' + date[6:8]
                            key_intervals.append(date) #–î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π –ø—Ä–∏–µ–º
                            break

    return key_intervals

def json_directions():
    direction_json = requests.get(departments_url).json()
    return direction_json



class Record:
    def __init__(self, bot, message, state):
        self.bot = bot
        self.message = message
        self.state = state

    def get_record_direction(self):

        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""

        user_id = self.message.from_user.id
        direction_json = json_directions()

        if (direction_json["success"] == True):
            key_direction = [types.KeyboardButton(text=direction["name"].strip()) for direction in direction_json["data"]] #c–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            markup = create_menu(list(key_direction), False)
            self.bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=markup) #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            db_users.set_state(user_id, self.state)
        else:
            self.bot.send_message(user_id, text="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=main_btns)

    def get_record_doctor(self):

        """–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤"""

        user_id = self.message.from_user.id
        direction_name = self.message.text

        if direction_name == "‚¨Ö –ù–∞–∑–∞–¥" and db_users.get_current_state(user_id) == "–í—ã–±–æ—Ä –¥–∞—Ç—ã": # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å –≤–æ–±–æ—Ä–∞ –¥–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –∑–∞–Ω–æ–≥–æ
            direction_name = db_users.get_current_property(user_id, 'Direction') # —É–∑–Ω–∞–µ–º id –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–∞—á–µ–π
        if direction_name == "‚¨Ö –ù–∞–∑–∞–¥":
            db_users.set_state(user_id, S_START)
            self.bot.send_message(user_id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_btns)
        
        
        
        direction_json = json_directions()
    
        if (direction_json["success"] == True):
            for direction in direction_json["data"]:
                if (direction['name'].strip() == direction_name):
                    db_users.set_property(user_id, 'DirectionID', direction['id']) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω—É–∂–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
                    db_users.set_property(user_id, 'Direction', direction_name)
                    self.bot.send_message(self.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + direction_name)
                    doctors_json = get_data_from_api(doctors_url, direction['id']) # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤
                    if bool(doctors_json) == True:
                        db_users.set_state(user_id, self.state)
                        key_doctors = [types.KeyboardButton(text=doctor["name"]) for doctor in doctors_json] # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                        markup = create_menu(list(key_doctors))
                        self.bot.send_message(self.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:', reply_markup=markup)
                    else:
                        db_users.set_state(user_id, S_CHOOSE_DIR)
                        key_direction = [types.KeyboardButton(text=direction["name"].strip()) for direction in direction_json["data"]]
                        markup = create_menu(list(key_direction), False)
                        self.bot.send_message(self.message.chat.id, '–í –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Ç –≤—Ä–∞—á–µ–π, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.', reply_markup=markup)
        else:
            self.bot.send_message(user_id, text="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=main_btns)
    
    def get_record_date(self):

        """–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è –≤—Ä–∞—á–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç"""

        user_id = self.message.from_user.id
        doctor_name = self.message.text
 
        if doctor_name == "‚¨Ö –ù–∞–∑–∞–¥" and db_users.get_current_state(user_id) == "–í—ã–±–æ—Ä –≤—Ä–∞—á–∞": # –µ—Å–ª–∏ –≤–º–µ—Å—Ç–æ –¥–∞—Ç, —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.get_record_direction()
            db_users.set_state(user_id, S_CHOOSE_DIR)
            return
        elif doctor_name == "‚¨Ö –ù–∞–∑–∞–¥": # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ –∑–∞–Ω–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç
            doctor_name = db_users.get_current_property(user_id, 'Doctor') # –ø–æ–ª—É—á–∞–µ–º –¥–æ–∫—Ç–æ—Ä–∞ –∏–∑ –±–¥, —á—Ç–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∞—Ç
        
        direction_id = db_users.get_current_property(user_id, 'DirectionID') # —É–∑–Ω–∞–µ–º id –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        doctors_json = get_data_from_api(doctors_url, direction_id) # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤
        for doctor in doctors_json:
            if (doctor['name'] == doctor_name): # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–∑ api —Ç–æ –±–µ—Ä–µ–º –µ–≥–æ ID
                self.bot.send_message(self.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + doctor_name)
                db_users.set_property(user_id, 'DoctorCode', doctor['dcode']) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –¥–æ–∫—Ç–æ—Ä–∞

                intervals_json = get_data_from_api(intervals_url, doctor['dcode']) # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞
                available_date = get_available_date(intervals_json) # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
                if bool(available_date) == True:
                    markup = create_menu(list(available_date)) # —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç
                    self.bot.send_message(self.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', reply_markup=markup)
                    db_users.set_state(user_id, self.state)
                else:
                    key_doctors = [types.KeyboardButton(text=doctor["name"]) for doctor in doctors_json] # –ï—Å–ª–∏ —É –≤—Ä–∞—á–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç, —Å–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ
                    markup = create_menu(list(key_doctors))
                    db_users.set_state(user_id, S_CHOOSE_DOCTOR)
                    self.bot.send_message(self.message.chat.id, text="–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –≤—Ä–∞—á–∞!", reply_markup=markup)

    def get_record_time(self):

        """–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞"""

        user_id = self.message.from_user.id
        doctor_date = self.message.text

        if doctor_date == "‚¨Ö –ù–∞–∑–∞–¥":
            self.get_record_doctor() # –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
            db_users.set_state(user_id, S_CHOOSE_DOCTOR)
            return
    
        self.bot.send_message(user_id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + doctor_date)

        doctor_id = db_users.get_current_property(user_id, 'DoctorCode') #—É–∑–Ω–∞–µ–º id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞
        intervals_json = get_data_from_api(intervals_url, doctor_id) # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞
        available_time = get_available_date(intervals_json, choosenDate=doctor_date) # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if bool(available_time) == True:
            markup = create_menu(available_time)
            self.bot.send_message(self.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:', reply_markup=markup)
            db_users.set_state(user_id, self.state)

    def get_record_final(self):

        """–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∏ –≤—ã–≤–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –Ω–∞ —Ñ–∏–Ω–∞–ª"""

        user_id = self.message.from_user.id
        doctor_time = self.message.text

        if (doctor_time == "‚¨Ö –ù–∞–∑–∞–¥"): # –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç
            self.get_record_date()
            db_users.set_state(user_id, S_CHOOSE_DATE)
            return

        get_contact = [types.KeyboardButton('üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏', request_contact=True), types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞')]

        markup = create_menu(get_contact, width=1, back=False)
        self.bot.send_message(self.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: ' + doctor_time, reply_markup=markup )
        db_users.set_state(user_id, self.state)