from zoneinfo import available_timezones
import requests
import telebot
from telebot import types
from auth_data import token
from core import Record, create_menu, json_directions, get_available_date, get_data_from_api, main_btns, button, departments_url, doctors_url, intervals_url
import core
import db_users

text_messages = {
    'start':
        u'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n'
        u'–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É.\n\n'
        u'1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n'
        u'2. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞, —Å–≤–æ–±–æ–¥–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n'
        u'3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å\n',
    'contact':
        u'109544, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –®–∫–æ–ª—å–Ω–∞—è, –¥. 49\n'
        u'–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.\n\n'
        u'–ü–Ω-–ü—Ç: 7:30 ‚Äî 21:00\n'
        u'–°–±: 8:00 ‚Äî 21:00\n'
        u'–í—Å: 8:30 ‚Äî 20:00\n',
}

def telegram_bot(token):
    bot = telebot.TeleBot(token)

    @bot.message_handler(commands=["start"])
    def start(message):
        db_users.check_and_add_user(message) # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —é–∑–µ—Ä–∞ –≤ –±–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        bot.send_message(message.chat.id, text=text_messages['start'].format(name=message.from_user.first_name), reply_markup=main_btns)
        db_users.set_state(message.from_user.id, core.S_START)


    @bot.message_handler(content_types=['contact']) # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    def contact(message):
        if message.contact is not None:
            user_id = message.from_user.id
            text = '–í–∞—à–µ –∏–º—è: ' + message.contact.first_name + ' ' + message.contact.last_name + '\n–¢–µ–ª–µ—Ñ–æ–Ω: ' + message.contact.phone_number + '\n–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" –í—ã –¥–∞–µ—Ç–µ <a href="https://doct.ru/rules/">—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>.'
            db_users.set_property(user_id, 'Phone', message.contact.phone_number)
            record_btns = ['‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', '‚ùå –û—Ç–º–µ–Ω–∞']
            markup = create_menu(record_btns, back=False)
            bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")

    @bot.message_handler(func=lambda message: db_users.get_current_state(message.from_user.id) == core.S_CHOOSE_DIR)
    def choosen_directions(message):
        """
        –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        """
        direction_name = message.text
        user_id = message.from_user.id
        db_users.set_property(user_id, 'Direction', direction_name) #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

        doctors = Record(bot, message, core.S_CHOOSE_DOCTOR)
        doctors.get_record_doctor() # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—Ç–æ—Ä–æ–≤

    @bot.message_handler(func=lambda message: db_users.get_current_state(message.from_user.id) == core.S_CHOOSE_DOCTOR)
    def choosen_doctors(message):
        """
        –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–æ–∫—Ç–æ—Ä—É
        """
        doctor_name = message.text   
        user_id = message.from_user.id
        if doctor_name != "‚¨Ö –ù–∞–∑–∞–¥":
            db_users.set_property(user_id, 'Doctor', doctor_name) #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞
        
        dates = Record(bot, message, core.S_CHOOSE_DATE)
        dates.get_record_date() # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –î–∞—Ç –ø—Ä–∏–µ–º–∞

    @bot.message_handler(func=lambda message: db_users.get_current_state(message.from_user.id) == core.S_CHOOSE_DATE)
    def choosen_date(message):
        """
        –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        """
        doctor_date = message.text   
        user_id = message.from_user.id
        db_users.set_property(user_id, 'RecordingDate', doctor_date)

        times = Record(bot, message, core.S_CHOOSE_TIME)
        times.get_record_time() # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

    @bot.message_handler(func=lambda message: db_users.get_current_state(message.from_user.id) == core.S_CHOOSE_TIME)
    def choosen_time(message):
        doctor_time = message.text
        user_id = message.from_user.id
        db_users.set_property(user_id, 'RecordingTime', doctor_time) #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞

        final = Record(bot, message, core.S_RECORD_DONE)
        final.get_record_final() # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏


    @bot.message_handler(content_types=['text'])
    def func(message):
        if(message.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã"):
            bot.send_message(message.chat.id, text=text_messages['contact'], reply_markup=button)
        elif(message.text == "üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"):
            directions = Record(bot, message, core.S_CHOOSE_DIR)
            directions.get_record_direction()
        elif(message.text == "‚ùó –ú–æ–∏ –∑–∞–ø–∏—Å–∏"):
            user_id = message.from_user.id
            try:
                user_info = db_users.get_user_data(user_id)
                
                if user_info['success'] is not None:
                    records = len(user_info['success'])
                    bot.send_message(message.chat.id, text=f'–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {records} –∑–∞–ø–∏—Å–µ–π')
                    for success_data in enumerate(user_info['success']):
                        success_text = f'–ó–∞–ø–∏—Å—å ‚Ññ{success_data[0]+1}: {success_data[1][0]["direction"]}, {success_data[1][0]["doctor"]}, {success_data[1][0]["date"]}, {success_data[1][0]["time"]}.'
                        bot.send_message(message.chat.id, text=success_text)
            except Exception as ex:
                bot.send_message(message.chat.id, text="–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        elif (message.text == "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"):
            user_id = message.from_user.id

            user_info = db_users.get_user_data(user_id) # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
            success_msg = f"–£–≤–∞–∂–∞–µ–º—ã–π, {user_info['first_name']} {user_info['last_name']}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É {user_info['Doctor']} \n–î–∞—Ç–∞: {user_info['RecordingDate']} \n–í—Ä–µ–º—è: {user_info['RecordingTime']}"
            admin_msg = f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞–ø–∏—Å—å —Å —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞. \n{user_info['first_name']} {user_info['last_name']} \n–¢–µ–ª–µ—Ñ–æ–Ω: {user_info['Phone']} \n–ö –≤—Ä–∞—á—É {user_info['Doctor']} \n–î–∞—Ç–∞: {user_info['RecordingDate']} \n–í—Ä–µ–º—è: {user_info['RecordingTime']}"

            db_users.set_success_result(user_id, direction=user_info['Direction'], doctor=user_info['Doctor'], date=user_info['RecordingDate'], time=user_info['RecordingTime'])

            bot.send_message(message.chat.id, success_msg, reply_markup=main_btns)
            bot.send_message(368992399, admin_msg) # —Ç—É—Ç id –∞–¥–º–∏–Ω–∞
        elif (message.text == "‚ùå –û—Ç–º–µ–Ω–∞"):
            bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_btns)
        elif (message.text ==  "‚¨Ö –ù–∞–∑–∞–¥"):
            print(message.text)
            bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_btns)
            db_users.set_state(message.from_user.id, core.S_START)
        # else:
        #     bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..", reply_markup=main_btns)



    try:
        bot.infinity_polling(timeout=10, long_polling_timeout = 5)
    except Exception as e:
        print(e)

if __name__ == '__main__':
    telegram_bot(token)